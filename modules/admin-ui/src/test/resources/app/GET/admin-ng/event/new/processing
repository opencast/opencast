[{"id":"full","title":"Encode, Analyze, and Distribute","description":"\n    A simple workflow that transcodes the media into distribution formats, then sends the resulting distribution files,\n    along with their associated metadata, to the distribution channels.\n  ","configuration_panel":"\n  \n    <fieldset>\n      <legend>Holds<\/legend>\n      <span>Processing should be paused to allow for:<\/span>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n          <input id=\"videoPreview\" name=\"videoPreview\" type=\"checkbox\" class=\"configField holdCheckbox\" style=\"visibility:hidden\" value=\"true\"\/>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"trimholdconfig\">\n            <input id=\"trimHold\" name=\"trimHold\" type=\"checkbox\" class=\"configField holdCheckbox\" value=\"true\" \/>\n            <span id=\"i18n_hold_for_trim\">&nbsp;Videoeditor (with option to edit info)<\/span>\n          <\/span>\n        <\/li>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"captionconfig\">\n            <input id=\"captionHold\" name=\"captionHold\" type=\"checkbox\" class=\"configField holdCheckbox\" value=\"true\"\/>\n            <span id=\"i18n_hold_for_caption\">&nbsp;Captions file upload<\/span>\n          <\/span>\n        <\/li>\n      <\/ul>\n    <\/fieldset>\n    <fieldset>\n      <legend>Archive<\/legend>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"archiveconfig\">\n            <input id=\"archiveOp\" name=\"archiveOp\" type=\"checkbox\" checked=\"checked\" class=\"configField holdCheckbox\" value=\"true\"\/>\n            <span id=\"i18n_activate_archive\">&nbsp;Archive the media package<\/span>\n          <\/span>\n        <\/li>\n      <\/ul>\n    <\/fieldset>  \n    <fieldset>\n      <legend>Publication<\/legend>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n        <!-- field: License -->\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"engageconfig\">\n            <input id=\"publishEngage\" name=\"publishEngage\" type=\"checkbox\" checked=\"checked\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Matterhorn Media Module<\/span>\n\t\t  <\/span>\n        <\/li>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"harvestingconfig\">\n            <input id=\"publishHarvesting\" name=\"publishHarvesting\" type=\"checkbox\" checked=\"checked\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Metadata Harvesting<\/span>\n          <\/span>\n        <\/li>\n        <!--\n\t    <li class=\"ui-helper-clearfix\">\n          <span id=\"youtubeconfig\">\n            <input id=\"publishYoutube\" name=\"publishYoutube\" type=\"checkbox\" disabled=\"disabled\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Youtube<\/span>\n          <\/span>\n        <\/li>\n        -->\n      <\/ul>\n    <\/fieldset>\n\n    <script type=\"text\/javascript\">\n      var ocWorkflowPanel = ocWorkflowPanel || {};\n      var trimHold = $('input#trimHold');\n      var captionHold = $('input#captionHold');\n      var videoPreview = $('input#videoPreview');\n      \n      var checkVideoPreview = function(){\n        var checkValue = trimHold.is(':checked') || captionHold.is(':checked');\n        videoPreview.attr('checked', checkValue);\n      }\n      \n      trimHold.click(checkVideoPreview);\n      captionHold.click(checkVideoPreview);\n\n      ocWorkflowPanel.registerComponents = function(components){\n\n        \/* components with keys that begin with 'org.opencastproject.workflow.config' will be passed\n         * into the workflow. The new ocAdmin.Component key must match the components array key.\n         *\n         * Example:'org.opencastproject.workflow.config.myProperty' will be availible at ${my.property}\n         *\/\n\n        components['org.opencastproject.workflow.config.trimHold'] = new ocAdmin.Component(\n          ['trimHold'],\n          {key: 'org.opencastproject.workflow.config.trimHold'},\n          {getValue: function(){ return this.fields.trimHold.is(\":checked\"); }\n        });\n          \n        components['org.opencastproject.workflow.config.archiveOp'] = new ocAdmin.Component(\n          ['archiveOp'],\n          {key: 'org.opencastproject.workflow.config.archiveOp'},\n          {getValue: function(){ return this.fields.archiveOp.is(\":checked\");}\n        });\n          \n        components['org.opencastproject.workflow.config.captionHold'] = new ocAdmin.Component(\n          ['captionHold'],\n          {key: 'org.opencastproject.workflow.config.captionHold'},\n          {getValue: function(){ return this.fields.captionHold.is(\":checked\");}\n        });\n          \n        components['org.opencastproject.workflow.config.videoPreview'] = new ocAdmin.Component(\n          ['videoPreview'],\n          {key: 'org.opencastproject.workflow.config.videoPreview'},\n          {getValue: function(){ return this.fields.videoPreview.is(\":checked\");}\n        });\n          \n        ocScheduler.dublinCore.components['license'] = new ocAdmin.Component(\n          ['license'],\n          {label: 'licenseLabel', key: 'license'}\n        );\n\n        components['org.opencastproject.workflow.config.publishEngage'] = new ocAdmin.Component(\n          ['publishEngage'],\n          {key: 'org.opencastproject.workflow.config.publishEngage'},\n          {getValue: function(){ return this.fields.publishEngage.is(\":checked\");}\n        });\n\n        components['org.opencastproject.workflow.config.publishHarvesting'] = new ocAdmin.Component(\n          ['publishHarvesting'],\n          {key: 'org.opencastproject.workflow.config.publishHarvesting'},\n          {getValue: function(){ return this.fields.publishHarvesting.is(\":checked\");}\n        });\n\n      }\n      ocWorkflowPanel.setComponentValues = function(values, components){\n        components['org.opencastproject.workflow.config.captionHold'].setValue(values['org.opencastproject.workflow.config.captionHold']);\n        components['org.opencastproject.workflow.config.trimHold'].setValue(values['org.opencastproject.workflow.config.trimHold']);\n        components['org.opencastproject.workflow.config.videoPreview'].setValue(values['org.opencastproject.workflow.config.videoPreview']);\n        components['org.opencastproject.workflow.config.archiveOp'].setValue(values['org.opencastproject.workflow.config.archiveOp']);\n        components['org.opencastproject.workflow.config.publishEngage'].setValue(values['org.opencastproject.workflow.config.publishEngage']);\n        components['org.opencastproject.workflow.config.publishHarvesting'].setValue(values['org.opencastproject.workflow.config.publishHarvesting']);\n        components['license'].setValue(values['license']);\n      }\n    <\/script>\n  \n  "},{"id":"full-html5","title":"Encode, Analyze, and Distribute to HTML5","description":"\n    A simple workflow that transcodes the media into distribution formats, then sends the resulting distribution files,\n    along with their associated metadata, to the distribution channels.\n  ","configuration_panel":"\n  \n    <fieldset>\n      <legend>Holds<\/legend>\n      <span>Processing should be paused to allow for:<\/span>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n          <input id=\"videoPreview\" name=\"videoPreview\" type=\"checkbox\" class=\"configField holdCheckbox\" style=\"visibility:hidden\" value=\"true\"\/>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"trimholdconfig\">\n            <input id=\"trimHold\" name=\"trimHold\" type=\"checkbox\" class=\"configField holdCheckbox\" value=\"true\" \/>\n            <span id=\"i18n_hold_for_trim\">&nbsp;Videoeditor (with option to edit info)<\/span>\n          <\/span>\n        <\/li>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"captionconfig\">\n            <input id=\"captionHold\" name=\"captionHold\" type=\"checkbox\" class=\"configField holdCheckbox\" value=\"true\"\/>\n            <span id=\"i18n_hold_for_caption\">&nbsp;Captions file upload<\/span>\n          <\/span>\n        <\/li>\n      <\/ul>\n    <\/fieldset>\n    <fieldset>\n      <legend>Archive<\/legend>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"archiveconfig\">\n            <input id=\"archiveOp\" name=\"archiveOp\" type=\"checkbox\" checked=\"checked\" class=\"configField holdCheckbox\" value=\"true\"\/>\n            <span id=\"i18n_activate_archive\">&nbsp;Archive the media package<\/span>\n          <\/span>\n        <\/li>\n      <\/ul>\n    <\/fieldset>  \n    <fieldset>\n      <legend>Publication<\/legend>\n      <ul class=\"oc-ui-checkbox-list-upload\">\n        <!-- field: License -->\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"engageconfig\">\n            <input id=\"publishEngage\" name=\"publishEngage\" type=\"checkbox\" checked=\"checked\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Matterhorn Media Module<\/span>\n\t\t  <\/span>\n        <\/li>\n        <li class=\"ui-helper-clearfix\">\n          <span id=\"harvestingconfig\">\n            <input id=\"publishHarvesting\" name=\"publishHarvesting\" type=\"checkbox\" checked=\"checked\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Metadata Harvesting<\/span>\n          <\/span>\n        <\/li>\n        <!--\n\t    <li class=\"ui-helper-clearfix\">\n          <span id=\"youtubeconfig\">\n            <input id=\"publishYoutube\" name=\"publishYoutube\" type=\"checkbox\" disabled=\"disabled\" class=\"configField\" value=\"true\" \/>\n            <span id=\"i18n_dist_mmm\">&nbsp;Youtube<\/span>\n          <\/span>\n        <\/li>\n        -->\n      <\/ul>\n    <\/fieldset>\n\n    <script type=\"text\/javascript\">\n      var ocWorkflowPanel = ocWorkflowPanel || {};\n      var trimHold = $('input#trimHold');\n      var captionHold = $('input#captionHold');\n      var videoPreview = $('input#videoPreview');\n      \n      var checkVideoPreview = function(){\n        var checkValue = trimHold.is(':checked') || captionHold.is(':checked');\n        videoPreview.attr('checked', checkValue);\n      }\n      \n      trimHold.click(checkVideoPreview);\n      captionHold.click(checkVideoPreview);\n\n      ocWorkflowPanel.registerComponents = function(components){\n\n        \/* components with keys that begin with 'org.opencastproject.workflow.config' will be passed\n         * into the workflow. The new ocAdmin.Component key must match the components array key.\n         *\n         * Example:'org.opencastproject.workflow.config.myProperty' will be availible at ${my.property}\n         *\/\n\n        components['org.opencastproject.workflow.config.trimHold'] = new ocAdmin.Component(\n          ['trimHold'],\n          {key: 'org.opencastproject.workflow.config.trimHold'},\n          {getValue: function(){ return this.fields.trimHold.is(\":checked\"); }\n        });\n          \n        components['org.opencastproject.workflow.config.archiveOp'] = new ocAdmin.Component(\n          ['archiveOp'],\n          {key: 'org.opencastproject.workflow.config.archiveOp'},\n          {getValue: function(){ return this.fields.archiveOp.is(\":checked\");}\n        });\n          \n        components['org.opencastproject.workflow.config.captionHold'] = new ocAdmin.Component(\n          ['captionHold'],\n          {key: 'org.opencastproject.workflow.config.captionHold'},\n          {getValue: function(){ return this.fields.captionHold.is(\":checked\");}\n        });\n          \n        components['org.opencastproject.workflow.config.videoPreview'] = new ocAdmin.Component(\n          ['videoPreview'],\n          {key: 'org.opencastproject.workflow.config.videoPreview'},\n          {getValue: function(){ return this.fields.videoPreview.is(\":checked\");}\n        });\n          \n        ocScheduler.dublinCore.components['license'] = new ocAdmin.Component(\n          ['license'],\n          {label: 'licenseLabel', key: 'license'}\n        );\n\n        components['org.opencastproject.workflow.config.publishEngage'] = new ocAdmin.Component(\n          ['publishEngage'],\n          {key: 'org.opencastproject.workflow.config.publishEngage'},\n          {getValue: function(){ return this.fields.publishEngage.is(\":checked\");}\n        });\n\n        components['org.opencastproject.workflow.config.publishHarvesting'] = new ocAdmin.Component(\n          ['publishHarvesting'],\n          {key: 'org.opencastproject.workflow.config.publishHarvesting'},\n          {getValue: function(){ return this.fields.publishHarvesting.is(\":checked\");}\n        });\n\n      }\n      ocWorkflowPanel.setComponentValues = function(values, components){\n        components['org.opencastproject.workflow.config.captionHold'].setValue(values['org.opencastproject.workflow.config.captionHold']);\n        components['org.opencastproject.workflow.config.trimHold'].setValue(values['org.opencastproject.workflow.config.trimHold']);\n        components['org.opencastproject.workflow.config.videoPreview'].setValue(values['org.opencastproject.workflow.config.videoPreview']);\n        components['org.opencastproject.workflow.config.archiveOp'].setValue(values['org.opencastproject.workflow.config.archiveOp']);\n        components['org.opencastproject.workflow.config.publishEngage'].setValue(values['org.opencastproject.workflow.config.publishEngage']);\n        components['org.opencastproject.workflow.config.publishHarvesting'].setValue(values['org.opencastproject.workflow.config.publishHarvesting']);\n        components['license'].setValue(values['license']);\n      }\n    <\/script>\n  \n  "},{"id":"theme","title":"Demo - Theme WOH","description":"Test theme WOH","configuration_panel":"\n    \n  "},{"id":"videolounge","title":"Process video for videolounge","description":"\n    A simple workflow to prepare video for videolounge and then publish them to OAPMH to be harvested by the video portal.\n  ","configuration_panel":""}]
