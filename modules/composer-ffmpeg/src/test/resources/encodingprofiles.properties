####
# Profile definitions for the encoding service.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [video|image]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track categories for which this format is applicable.
#     Known categories are:
#     - audio : for tracks containing only audio streams
#     - video : tracks containg video and probably audio
#     - enhanced-audio : for so-called enhanced audio tracks
##

# Distribution format definition for 4 by 3 h264 presenter/presentation downloads low
#profile.h264-low.http.name = H.264 MPEG-4 Download Low Quality (*.m4v)
profile.h264-low.http.name = h.264 download low quality
profile.h264-low.http.input = visual
profile.h264-low.http.output = visual
profile.h264-low.http.suffix = -dl.m4v
profile.h264-low.http.mimetype = visual/x-m4v
profile.h264-low.http.ffmpeg.command = -i #{in.video.path} -strict -2 -acodec copy -vcodec libx264 -b:a 48k -movflags faststart -vf scale=iw*.5:-1 #{out.dir}/#{out.name}#{out.suffix}

# Distribution format definition for 4 by 3 h264 presenter/presentation downloads medium
#profile.h264-medium.http.name = H.264 MPEG-4 Download Medium Quality (*.m4v)
profile.h264-medium.http.name = h.264 download medium quality
profile.h264-medium.http.input = visual
profile.h264-medium.http.output = visual
profile.h264-medium.http.suffix = -dm.m4v
profile.h264-medium.http.mimetype = visual/x-m4v
profile.h264-medium.http.ffmpeg.command = -i #{in.video.path} -strict -2 -c:a copy -c:v libx264 -ab 96k -filter:v scale=in_h*4/3:in_h,setdar=4/3 #{out.dir}/#{out.name}#{out.suffix}

# Distribution format definition for 4 by 3 h264 presenter/presentation downloads medium
#profile.h264-large.http.name = H.264 MPEG-4 Download Large Quality (*.m4v)
profile.h264-large.http.name = h.264 download medium quality
profile.h264-large.http.input = visual
profile.h264-large.http.output = visual
profile.h264-large.http.suffix = -out.#{in.video.suffix}
profile.h264-large.http.mimetype = visual/mp4
profile.h264-large.http.ffmpeg.command = -i #{in.video.path} -strict -2 -filter:a volume=1.5 -codec:v libx264 -b:a 96k #{out.dir}/#{out.name}#{out.suffix}

profile.mp3audio.http.name = mp3 audio download
profile.mp3audio.http.input = audio
profile.mp3audio.http.output = audio
profile.mp3audio.http.suffix = .mp3
profile.mp3audio.http.mimetype = audio/mp3
profile.mp3audio.http.ffmpeg.command = -i #{in.audio.path} -f mp3 -c:a libmp3lame -b:a 96k #{out.dir}/#{out.name}#{out.suffix}

# Distribution format definition for 4 by 3 h264 presenter/presentation streaming medium
#profile.h264.rtsp.name = H.264 MPEG-4 Streaming Medium Quality (*.mp4)
profile.h264.rtsp.name = h.264 streaming medium quality
profile.h264.rtsp.input = visual
profile.h264.rtsp.output = visual
profile.h264.rtsp.suffix = -sm.mp4
profile.h264.rtsp.mimetype = visual/mp4v-es

# Distribution format definition for 4 by 3 flash presenter/presentation streaming medium
profile.flash.rtmp.name = flash streaming medium quality
profile.flash.rtmp.input = visual
profile.flash.rtmp.output = visual
profile.flash.rtmp.suffix = -sm.flv
profile.flash.rtmp.mimetype = visual/x-flv
profile.flash.rtmp.ffmpeg.command = -i #{in.video.path} -r 15 -c:v flv -q:v 5 -filter:v yadif,scale=-1:360 -c:a libmp3lame -b:a 96k -ar 44100 #{out.dir}/#{out.name}#{out.suffix}


####
# Image formats, used for covers and slide previews.
#
# ATTENTION:
# Do not change the identifier of the formats below. Various indexer plugins,
# the feed generator and the rest servlet rely on their existence.
##

# Cover image ui
profile.cover-ui.http.name = cover image
profile.cover-ui.http.input = visual
profile.cover-ui.http.output = cover
profile.cover-ui.http.suffix = -ui-cover.jpg
profile.cover-ui.http.mimetype = image/jpeg
profile.cover-ui.http.ffmpeg.command = -i #{in.path} -y -r 1 -t 1 -f image2 -s 160x120 #{out.dir}/#{in.name}#{out.suffix}

# Cover image feeds
profile.cover-feed.http.name = cover image for feeds
profile.cover-feed.http.input = visual
profile.cover-feed.http.output = cover
profile.cover-feed.http.suffix = -feed-cover.jpg
profile.cover-feed.http.mimetype = image/jpeg
profile.cover-feed.http.ffmpeg.command = -i #{in.path} -y -r 1 -t 1 -f image2 -s 72x54 #{out.dir}/#{in.name}#{out.suffix}

# Slide images ui
profile.jpeg-slides.http.name = slides
profile.jpeg-slides.http.input = visual
profile.jpeg-slides.http.output = image
profile.jpeg-slides.http.suffix = -player.jpg
profile.jpeg-slides.http.mimetype = image/jpeg
profile.jpeg-slides.http.ffmpeg.command = -i #{in.path} -y -r 1 -f image2 -s 500x376 #{out.dir}/#{in.name}#{out.suffix}
#profile.jpeg-slides.http.ffmpeg.command = -y -i #{in.video.path} -ss #{time} -r 1 -vframes 1 -s 640x480 -f image2 #{out.dir}/#{out.name}#{out.suffix}

# Still image conversion for text analysis (ocr)
profile.image-conversion.http.name = still image for text extraction
profile.image-conversion.http.input = visual
profile.image-conversion.http.output = image
profile.image-conversion.http.suffix = .tif
profile.image-conversion.http.mimetype = image/tiff
profile.image-conversion.http.ffmpeg.command = -y -f image2 -i #{in.video.path} -f image2 #{out.dir}/#{out.name}#{out.suffix}

# Trim a stream
profile.trim.work.name = trim track
profile.trim.work.input = stream
profile.trim.work.output = visual
profile.trim.work.suffix = -trimmed.#{in.video.suffix}
profile.trim.work.ffmpeg.command = -i #{in.video.path} -acodec copy -vcodec copy -ss #{trim.start} -t #{trim.duration} #{out.dir}/#{out.name}#{out.suffix}

####
# Special preview formats used by the media analysis service.
# Only change them if you know what you are doing.
##

# Distribution format definition for simple avi downloads
profile.tracks-lfr.http.name = mpeg4/avi 160x120 5fps low framerate
profile.tracks-lfr.http.input = visual
profile.tracks-lfr.http.output = visual
profile.tracks-lfr.http.suffix = .avi
profile.tracks-lfr.http.mimetype = visual/avi
profile.tracks-lfr.http.ffmpeg.command = -i #{in.path} -y -r 5 -s 160x120 #{out.dir}/#{in.name}#{out.suffix}

# Slide previews
profile.tracks-slides.http.name = slide previews
profile.tracks-slides.http.input = visual
profile.tracks-slides.http.output = image
profile.tracks-slides.http.suffix = -%06d.jpg
profile.tracks-slides.http.mimetype = image/jpeg
profile.tracks-slides.http.ffmpeg.command = -i #{in.path} -y -r 1 -f image2 -s 500x376 #{out.dir}/#{in.name}#{out.suffix}

# Preview image for the player, shown before the movie is started
profile.player-preview.http.name = cover image for engage
profile.player-preview.http.input = visual
profile.player-preview.http.output = image
profile.player-preview.http.suffix = -player.jpg
profile.player-preview.http.mimetype = image/jpeg
profile.player-preview.http.ffmpeg.command = -y -i #{in.video.path} -ss #{time} -r 1 -vframes 1 -s 640x480 -f image2 #{out.dir}/#{out.name}#{out.suffix}

# Re-encode audiovisual stream
profile.av.work.name = Re-encode audiovisual track
profile.av.work.input = stream
profile.av.work.output = audiovisual
profile.av.work.suffix = -work.#{in.video.suffix}
profile.av.work.ffmpeg.command = -strict unofficial -i #{in.video.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

# Parallel Encoding of videos
profile.parallel.http.name = parallel video encoding
profile.parallel.http.input = visual
profile.parallel.http.output = visual
profile.parallel.http.suffix.low = -low.mp4
profile.parallel.http.suffix.medium = -medium.mp4
profile.parallel.http.suffix.high = -high.mp4
profile.parallel.http.ffmpeg.command = -i #{in.video.path} -c:v libx264 -filter:v yadif,scale=-1:288,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset slower -crf 28 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 22050 -ab 64k #{out.dir}/#{out.name}#{out.suffix.low} -c:v libx264 -filter:v yadif,scale=-1:360,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset slower -crf 25 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.medium} -c:v libx264 -filter:v yadif,scale=-1:566,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset medium -crf 23 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.high}

# Concat
profile.concat.work.name = concat
profile.concat.work.input = visual
profile.concat.work.output = visual
profile.concat.work.suffix = -concatenated.mp4
profile.concat.work.mimetype = video/mp4
profile.concat.work.ffmpeg.command = #{concatCommand} -acodec libmp3lame -b:a 128k -vcodec mpeg4 -b:v 1200k -flags +aic+mv4 #{out.dir}/#{out.name}#{out.suffix}

# Image to video
profile.image-movie.work.name = image to video
profile.image-movie.work.input = image
profile.image-movie.work.output = visual
profile.image-movie.work.suffix = -image-video.mp4
profile.image-movie.work.mimetype = video/mp4
profile.image-movie.work.ffmpeg.command = -loop 1 -i #{in.video.path} -c:v libx264 -r 25 -t #{time} -pix_fmt yuv420p #{out.dir}/#{out.name}#{out.suffix}

# Composite
profile.composite.work.name = composite
profile.composite.work.input = visual
profile.composite.work.output = visual
profile.composite.work.suffix = -compound.mp4
profile.composite.work.mimetype = video/mp4
profile.composite.work.ffmpeg.command = -i #{in.video.path} #{compositeCommand} -acodec libmp3lame -b:a 128k -vcodec mpeg4 -b:v 1200k -flags +aic+mv4 #{out.dir}/#{out.name}#{out.suffix}

profile.mux-av.work.name = mux audio and video
profile.mux-av.work.input = stream
profile.mux-av.work.output = visual
profile.mux-av.work.suffix = -work.#{in.video.suffix}
profile.mux-av.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

#Multi encode - One profile with multiple outputs
#Useful for demuxing epiphan muxed streams
profile.demux.work.name = demux into 2 av files
profile.demux.work.input = visual
profile.demux.work.output = visual
profile.demux.work.suffix = -out.mp4
profile.demux.work.mimetype = video/mp4
profile.demux.work.ffmpeg.command = -i #{in.video.path} -strict -2 -acodec copy -vcodec libx264 -b:a 96k -map 0:0 -map 0:1 #{out.dir}/#{out.name}1#{out.suffix} -strict -2 -map 0:2 -map 0:3 #{out.dir}/#{out.name}2#{out.suffix}
