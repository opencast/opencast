####
# Profile definitions for the encoding service.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [video|image]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.input:
#     Track categories for which this format is applicable.
#     Known categories are:
#     - audio : for tracks containing only audio streams
#     - video : tracks containg video and probably audio
#     - enhanced-audio : for so-called enhanced audio tracks
##

# Distribution format definition for 4 by 3 h264 presenter/presentation downloads low
#profile.h264-low.http.name = H.264 MPEG-4 Download Low Quality (*.m4v)
profile.h264-low.http.name = h.264 download low quality
profile.h264-low.http.input = visual
profile.h264-low.http.output = visual
profile.h264-low.http.suffix = -dl.m4v

# Distribution format definition for 4 by 3 h264 presenter/presentation downloads medium
#profile.h264-medium.http.name = H.264 MPEG-4 Download Medium Quality (*.m4v)
profile.h264-medium.http.name = h.264 download medium quality
profile.h264-medium.http.input = visual
profile.h264-medium.http.output = visual
profile.h264-medium.http.suffix = -dm.m4v

# Re-mux audiovisual stream
#   file and muxes them into the same kind of container they were in before. A
#   This command will take two files (video and audio) and mux the contained
profile.mux-av.copy.name = mux audio and video
profile.mux-av.copy.input = stream
profile.mux-av.copy.output = visual
profile.mux-av.copy.suffix = -work.#{in.video.suffix}
profile.mux-av.copy.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

# Distribution format definition for 4 by 3 flash presenter/presentation streaming medium
profile.flash.rtmp.name = flash streaming medium quality
profile.flash.rtmp.input = visual
profile.flash.rtmp.output = visual
profile.flash.rtmp.suffix = -sm.flv

# Still image conversion for text analysis (ocr)
profile.image-conversion.http.name = still image for text extraction
profile.image-conversion.http.input = visual
profile.image-conversion.http.output = image
profile.image-conversion.http.suffix = .tif
profile.image-conversion.http.ffmpeg.command = -y -f image2 -i #{in.video.path} -f image2 #{out.dir}/#{out.name}#{out.suffix}

####
# Image formats, used for covers and slide previews.
#
# ATTENTION:
# Do not change the identifier of the formats below. Various indexer plugins,
# the feed generator and the rest servlet rely on their existence.
##

# Cover image ui
profile.cover-ui.http.name = cover image
profile.cover-ui.http.input = visual
profile.cover-ui.http.output = cover
profile.cover-ui.http.suffix = -ui-cover.jpg
profile.cover-ui.http.ffmpeg.command = -i #{in.path} -y -r 1 -t 1 -f image2 -s 160x120 #{out.dir}/#{in.name}#{out.suffix}

# Cover image feeds
profile.cover-feed.http.name = cover image for feeds
profile.cover-feed.http.input = visual
profile.cover-feed.http.output = cover
profile.cover-feed.http.suffix = -feed-cover.jpg
profile.cover-feed.http.ffmpeg.command = -i #{in.path} -y -r 1 -t 1 -f image2 -s 72x54 #{out.dir}/#{in.name}#{out.suffix}

# Slide images ui
profile.jpeg-slides.http.name = slides
profile.jpeg-slides.http.input = visual
profile.jpeg-slides.http.output = image
profile.jpeg-slides.http.suffix = -%06d.jpg
profile.jpeg-slides.http.ffmpeg.command = -i #{in.path} -y -r 1 -f image2 -s 500x376 #{out.dir}/#{in.name}#{out.suffix}

####
# Special preview formats used by the media analysis service.
# Only change them if you know what you are doing.
##

# Distribution format definition for simple avi downloads
profile.tracks-lfr.http.name = mpeg4/avi 160x120 5fps low framerate
profile.tracks-lfr.http.input = visual
profile.tracks-lfr.http.output = visual
profile.tracks-lfr.http.suffix = .avi
profile.tracks-lfr.http.ffmpeg.command = -i #{in.path} -y -r 5 -s 160x120 #{out.dir}/#{in.name}#{out.suffix}

# Slide previews
profile.tracks-slides.http.name = slide previews
profile.tracks-slides.http.input = visual
profile.tracks-slides.http.output = image
profile.tracks-slides.http.suffix = -%06d.jpg
profile.tracks-slides.http.ffmpeg.command = -i #{in.path} -y -r 1 -f image2 -s 500x376 #{out.dir}/#{in.name}#{out.suffix}

# Re-encode audiovisual stream
profile.av.copy.name = Re-encode audiovisual track
profile.av.copy.input = stream
profile.av.copy.output = audiovisual
profile.av.copy.suffix = -work.#{in.video.suffix}
profile.av.copy.ffmpeg.command = -strict unofficial -i #{in.video.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

# Parallel Encoding of videos
profile.parallel.http.name = parallel video encoding
profile.parallel.http.input = visual
profile.parallel.http.output = visual
profile.parallel.http.suffix.low = -low.mp4
profile.parallel.http.suffix.medium = -medium.mp4
profile.parallel.http.suffix.high = -high.mp4
profile.parallel.http.ffmpeg.command = -i #{in.video.path} -c:v libx264 -filter:v scale=-1:288,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset slower -crf 28 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 22050 -ab 64k #{out.dir}/#{out.name}#{out.suffix.low} -c:v libx264 -filter:v scale=-1:360,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset slower -crf 25 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.medium} -c:v libx264 -filter:v scale=-1:566,scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2 -preset medium -crf 23 -r 25 -profile:v baseline -tune film  -movflags faststart -c:a libvo_aacenc -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.high}
