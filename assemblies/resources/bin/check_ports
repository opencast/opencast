# Licensed to The Apereo Foundation under one or more contributor license
# agreements. See the NOTICE file distributed with this work for additional
# information regarding copyright ownership.
#
# The Apereo Foundation licenses this file to you under the Educational
# Community License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License
# at:
#
#   http://opensource.org/licenses/ecl2.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

# -----------------------------------------------------------------------
# check if http or https port is available to run opencast otherwise exit

PROGNAME=$(basename "$0")
nargs=$#

if [ "$PROGNAME" = "start-opencast" ] && [ "$nargs" -eq "0" ]; then
  if [ -d "$KARAF_ETC" ]; then
    SETENV_ETC="$KARAF_ETC"
  else
    if [ -d "${KARAF_BASE}" ]; then
      SETENV_ETC="${KARAF_BASE}/etc"
    else
      SETENV_ETC="${DIRNAME}/../etc"
    fi
  fi

  check_port() {
    port="$1"
    if [ "$port" -eq "$port" ] 2>/dev/null ; then
      hexPort=$(printf ":%04X " "$port")
    else
      # port specified is not a number ignore and keep current behaviour
      return 0;
    fi
    if [ -d /proc/net ] ; then
      if cat /proc/net/tcp* | awk '{print $2, $4}' | grep " 0[1A]$" | grep -q "$hexPort"; then
        return 1;
      fi
    else
      if netstat -anp tcp | grep -i "listen" | grep -q -F ".$port "; then
        return 1;
      fi
    fi
    return 0;
  }

  if grep -qi '^org.osgi.service.http.enabled[ =]*true *$' "${SETENV_ETC}/org.ops4j.pax.web.cfg"; then
    httpport=$(grep "org.osgi.service.http.port[ =]" "${SETENV_ETC}"/org.ops4j.pax.web.cfg)
    check_port "${httpport##*=}"
    if [ "$?" = "1" ]; then
      printf "\nHttp server port \e[1m%s\e[0m already in use \n" "${httpport##*=}"
      printf "reconfigure \e[1morg.osgi.service.http.port\e[0m in \e[1m%s/org.ops4j.pax.web.cfg\e[0m \n" "${SETENV_ETC}"
      exit 1
    fi
  fi

  if grep -qi '^org.osgi.service.http.secure.enabled[ =]*true *$' "${SETENV_ETC}/org.ops4j.pax.web.cfg"; then
    httpsport=$(grep "org.osgi.service.http.port.secure[ =]" "${SETENV_ETC}"/org.ops4j.pax.web.cfg)
    check_port "${httpsport##*=}"
    if [ "$?" = "1" ]; then
      printf "\nSecure http server port \e[1m%s\e[0m already in use \n" "${httpsport##*=}"
      printf "reconfigure \e[1morg.osgi.service.http.port.secure\e[0m in \e[1m%s/org.ops4j.pax.web.cfg\e[0m \n" "${SETENV_ETC}"
      exit 1
    fi
  fi

fi
