#########################################
### Opencast configuration properties ###
#########################################

# The internal URL of this Opencast installation, used to locate services running on this instance and for inter-node
# communication in distributed setups.
#
# Note that while the server.url is the public url of this instance, there is the actual public url of an individual
# tenant, which is configured in etc/load/org.opencastproject.organization-<tenant id>.cfg with the default tenant id
# being "mh_default_org".
#
# Also note that if this felix installation is proxied behind an Apache HTTPD reverse proxy, and communication is meant
# to go through that proxy, then server.url should point to the proxy's port (usually 80).
# Related options (like listening addresses) are located in etc/org.ops4j.pax.web.cfg
org.opencastproject.server.url=http://localhost:8080

# The environment specified below will show up in the email subject when sending a notification about transcription
# errors. Useful to differentiate among environments (dev, test, etc) and may be used by other services in the future.
#org.opencastproject.environment.name=


# The node name is a descriptive title for this Opencast instance, eg admin, worker01, etc. This is a useful alternative
# to the using the server url in the Admin UI on cloud platforms where nodes may be dynamically generated and not have a
# sensible hostname.
org.opencastproject.server.nodename=AllInOne

######### USER/AUTHENTICATION #########

# The username and password for a system administrator account. If both `user` and `pass` are set, Opencast will create
# or update that user when started up. If it is commented out, nothing will happen.
# WARNING: Commenting this out later or renaming the user will *not* remove already created user.
org.opencastproject.security.admin.user=admin
org.opencastproject.security.admin.pass=opencast
org.opencastproject.security.admin.roles=ROLE_ADMIN,ROLE_OAUTH_USER

# Email address of the server's admin.
org.opencastproject.admin.email=admin@localhost

# Optional custom roles which can used in ACLs and granted to users or groups (comma-separated list of role names)
#org.opencastproject.security.custom.roles=ROLE_ONE, ROLE_TWO, ROLE_THREE

# Optional custom roles pattern (regular expression). Roles matching this pattern can be added to ACLs.
#org.opencastproject.security.custom.roles.pattern=^[0-9a-f-]+_(Learner|Instructor)$

# The username and password to present to other Opencast servers when calling their REST endpoints.  The remote server
# must contain matching values.
org.opencastproject.security.digest.user=opencast_system_account
org.opencastproject.security.digest.pass=CHANGE_ME

# The number of times to retry a request if the nonce expires.
#org.opencastproject.security.digest.nonce.retries=12

# The configuration property specifying the minimum amount of time in seconds wait before retrying a request after
# a nonce timeout. Default is 300 seconds (5 minutes).
#org.opencastproject.security.digest.nonce.base.time=300

# The maximum amount of time to wait in addition to the base time for a random generator to add after a nonce timeout
# so that requests that timeout won't all try again at exactly the same time. Default is 300 seconds (5 minutes).
#org.opencastproject.security.digest.nonce.variable.time=300


######### STORAGE #########

# The directory where the system will store its processed files (including temporary files).  This directory should
# be persistent between reboots (i.e., not /tmp)
org.opencastproject.storage.dir=${karaf.data}/opencast

# The path to the asset manager directory
# Default: ${org.opencastproject.storage.dir}/archive
#org.opencastproject.episode.rootdir=${org.opencastproject.storage.dir}/archive

# The path to the repository of files used during media processing.
#org.opencastproject.file.repo.path=${org.opencastproject.storage.dir}/files

# The path to the working files (recommend using fast, transient storage)
org.opencastproject.workspace.rootdir=${org.opencastproject.storage.dir}/workspace

# The location to store uploaded static files such as images and videos.
org.opencastproject.staticfiles.rootdir=${org.opencastproject.storage.dir}/staticfiles

# Location of the temporary directory to build zip archives.
# Default: ${org.opencastproject.storage.dir}/tmp/zip
#org.opencastproject.workflow.handler.workflow.ZipWorkflowOperationHandler.tmpdir=${org.opencastproject.storage.dir}/tmp/zip


######### STREAMING AND DOWNLOAD #########

# The base URL of the streaming server (ususally "rtmp://<SERVER_URL>/matterhorn-engage").
# ${org.opencastproject.server.url} can not be used, because the streaming server does not use the HTTP protocol.
# Streaming is not included in the default workflow, since the Red5 streaming server is a 3rd party component that
# requires separate installation.
#org.opencastproject.streaming.url=rtmp://localhost/matterhorn-engage

# The directory where Opencast stores the streams
#org.opencastproject.streaming.directory=${org.opencastproject.storage.dir}/streams

# The port to use for the streaming server, only used by a Wowza streaming server.
#org.opencastproject.streaming.port=1935

# Server URL for Adaptive Streaming, usually the same server like RTMP streaming with a different protocol
#org.opencastproject.adaptive-streaming.url=http(s)://<wowza-server>/<wowza-application>

# Port for Adaptive Streaming (for Wowza usually 1935)
#org.opencastproject.adaptive-streaming.port=<port_number>

# Some newer streaming server versions expect an "flv:" tag within the rtmp URL.
# Not every RTMP-streaming server is compatible with this (i.e. nginx), so this
# is the compatibility mode to the old syntax.
# true  = without "flv:" tag - old syntax
# false = with    "flv:" tag - new syntax
#org.opencastproject.streaming.flvcompatibility=true

# The base URL for media downloads.
org.opencastproject.download.url=${org.opencastproject.server.url}/static

# The directory to store media, metadata, and attachments for download from the engage tool
org.opencastproject.download.directory=${org.opencastproject.storage.dir}/downloads


######### DATABASE #########

# Relational Database configuration.  By default, Opencast uses an embedded H2 database.  A standalone database server
# is recommended for production systems.  If you run the ddl script for your db vendor (see docs/scripts/ddl/) manually,
# (this is recommended) set 'ddl-generation' to 'false'.
org.opencastproject.db.ddl.generation=true

# db.vendor can be any of the values listed at under the "eclipselink.target-database" section of
# http://www.eclipse.org/eclipselink/documentation/2.4/jpa/extensions/p_target_database.htm#target-database
# Common values include MySQL, PostgreSQL.
#org.opencastproject.db.vendor=MySQL

# Opencast comes with the jdbc drivers for MySQL (com.mysql.jdbc.Driver) and PostgreSQL (org.postgresql.Driver). To add
# other jdbcDrivers to the Opencast runtime, rebuild the db module with your desired drivers.
#org.opencastproject.db.jdbc.driver=com.mysql.jdbc.Driver

# The jdbc connection url, username, and password
#org.opencastproject.db.jdbc.url=jdbc:mysql://localhost/opencast
#org.opencastproject.db.jdbc.user=opencast
#org.opencastproject.db.jdbc.pass=dbpassword

# The jdbc connection pool properties. See http://www.mchange.com/projects/c3p0/#basic_pool_configuration
# max.idle.time should be lower than the database server idle connection timeout duration (wait_timeout for mysql)
#org.opencastproject.db.jdbc.pool.max.size=15
#org.opencastproject.db.jdbc.pool.min.size=3
#org.opencastproject.db.jdbc.pool.acquire.increment=3
#org.opencastproject.db.jdbc.pool.max.statements=0
#org.opencastproject.db.jdbc.pool.login.timeout=1000
#org.opencastproject.db.jdbc.pool.max.idle.time=3600
#org.opencastproject.db.jdbc.pool.max.connection.age=0


######### Workspace Cleanup #########

# The scheduled period in seconds, at which a workspace cleanup operation is performed.
# 86400 seconds equals 24 hours.
# Default value: -1 (Disable cleanup scheduler)
org.opencastproject.workspace.cleanup.period=86400

# The maximum age a file must reach in seconds before a deletion of the file in the workspace cleanup operation is
# performed. 2592000 seconds equals 30 days.
# Default value: -1 (max age will never be reached)
org.opencastproject.workspace.cleanup.max.age=2592000


######### ACTIVE MQ BROKER #########

# This configures the connection to the Active MQ broker so that we can send and receive messages.
# There are many settings for specifying the broker url: http://activemq.apache.org/activemq-4-connection-uris.html
# Including with failover support details here: http://activemq.apache.org/failover-transport-reference.html
# Default (url): failover://(tcp://127.0.0.1:61616)?initialReconnectDelay=2000&maxReconnectDelay=60000
# Default (username/password): None
#activemq.broker.url=failover://(tcp://127.0.0.1:61616)?initialReconnectDelay=2000&maxReconnectDelay=60000
#activemq.broker.username=admin
#activemq.broker.password=password

######### Elasticsearch #########

# The address of an external Elasticsearch node for Opencast to use.
# If this is undefined, Opencast will launch an internal Elasticsearch node.
# Default: undefined
#org.opencastproject.elasticsearch.server.address=127.0.0.1

# The port of the external Elasticsearch node if defined.
# Default: 9300
#org.opencastproject.elasticsearch.server.port=9300


######### SOLR #########

# Default directory to use for embedded solr indexes.
# If not set, ${karaf.data}/solr-indexes will be used.
#org.opencastproject.solr.dir=${karaf.data}/solr-indexes

# Directory to store the embedded solr indices.  This should be a persistent and stable directory.
# Default: ${org.opencastproject.solr.dir}/{search, series, workflow}
#org.opencastproject.search.solr.dir=${org.opencastproject.solr.dir}/search
#org.opencastproject.series.solr.dir=${org.opencastproject.solr.dir}/series
#org.opencastproject.workflow.solr.dir=${org.opencastproject.solr.dir}/workflow

# URLs of dedicated Solr server to use.  Note that if thesw URLs are specified, the local embedded Solr index as
# configured using `org.opencastproject.*.solr.dir` will be ignored. A dedicated Solr server should be set up in order
# to enable running multiple instances of the related service. Please consult http://lucene.apache.org/solr/ on how to
# set up a standalone Solr server.
#org.opencastproject.search.solr.url=http://localhost:8983/solr/
#org.opencastproject.series.solr.url=http://localhost:8983/solr/
#org.opencastproject.workflow.solr.url=http://localhost:8983/solr/


######### Service Registry & Jobs #########

# The url of the remote service registry.  This is used in cases where there is no direct connection to the service
# registry database such as capture agens running in protected environments. This is typically true for capture agents
# and should be set to the url of a server running the actual implementation of the service registry and the path to
# the service registry(admin, worker, etc. See the build profiles in pom.xml for a complete list).
#org.opencastproject.serviceregistry.url=${org.opencastproject.server.url}/services

# The base URL to use for publishing job locations. If left commented out, the local server URL will be used.  Set this
# if you intend to support swapping servers with different IPs or host names.
#org.opencastproject.jobs.url=${org.opencastproject.server.url}

# Whether to accept a job whose load exceeds the host's max load
# Default: true
#org.opencastproject.job.load.acceptexceeding=true

######### Capture and Ingest #########

# Timeout for capture agent status, in minutes.
# Capture agents which have not sent status updates for this period will be marked as offline.
# Default: 120 minutes (2 hours)
#org.opencastproject.capture.admin.timeout=120

# The ID of the default workflow definition to run when media are ingested
#org.opencastproject.workflow.default.definition=schedule-and-upload

# The max number of ingests to allow at the same time. If more ingests try than the max they will receive service
# unavailable. A value of 0 means that the server will accept all ingests.
# Default: 0
#org.opencastproject.ingest.max.concurrent=0

######### Third-party Binaries #########

# Path to the ffmpeg binary. Its name is sufficient if the binary is in the
# system path (default: ffmpeg)
#org.opencastproject.composer.ffmpeg.path=/opt/ffmpeg/ffmpeg

# Path to the ffprobe binary. Its name is sufficient if the binary is in the
# system path (default: ffprobe)
#org.opencastproject.inspection.ffprobe.path=/opt/ffmpeg/ffprobe

# Path to the tesseract binary used by the text analyzer. Its name is
# sufficient if the binary is in the system path (default: tesseract)
#org.opencastproject.textanalyzer.tesseract.path=/opt/tesseract/tesseract

# Additional options for Tesseract like language or page segmentation mode.
# The default are no additional options.
#org.opencastproject.textanalyzer.tesseract.options=-l eng --psm 3

# Path to the hunspell binary used by the dictionary-hunspell
# module. The default ist just "hunspell" which requires hunspell to be in the
# search path.
#org.opencastproject.dictionary.hunspell.binary=/opt/hunspell/hunspell

# Command to use for filtering text by the dictionary-hunspell
# module. The command is appended to the hunspell binary path. It should filter
# the text from stdin and print the recognized words to stdout. Usually this
# should be a combination of "-G" and a list of dictionaries. The default is to
# use "-d de_DE,en_GB,en_US -G".
#org.opencastproject.dictionary.hunspell.command=-i utf-8 -d de_DE,en_GB,en_US -G

# The path for SoX command line used by audio normalization
#org.opencastproject.sox.path=/opt/sox/sox

######### Test Data #########

# Path to a CSV file to import test data from.
# If this is not set, no data is imported.
# Default: <unset>
#org.opencastproject.dataloader.csv=${karaf.etc}/dataimport.csv


######### Static Files #########

# True means to use a webserver to serve the static files but this will not secure
# any of the files using user or organization security. If false it uses
# Opencast endpoints to serve and secure the files.
#org.opencastproject.staticfiles.webserver.enabled=false

# The url to the location where the webserver serves the static file uploads from. It will add the organization and uuid
# for the uploaded static file. If not set Opencast uses endpoints to serve and secure the files.
#org.opencastproject.staticfiles.webserver.url=${org.opencastproject.server.url}/staticfiles/

# This is the maximum allowable size in bytes for a file to be uploaded. If the property is missing or set to 0 it is
# disabled.
# Default is 1000000000 which is 1GB.
#org.opencastproject.staticfiles.upload.max.size=1000000000


######### UI Configuration #########

# Location of the folder containing user interface configuration.
# Default: ${karaf.etc}/ui-config
#org.opencastproject.uiconfig.folder

######### User Directory #########

# The size of the user directory cache.
# Default: 200
#org.opencastproject.userdirectory.cache.size=200

# The expiry time of entries in the user directory cache, in minutes
# Default: 1 minute
#org.opencastproject.userdirectory.cache.expiry=1


######### KARAF CONFIGURATION #########

# The place for Karaf to put the lock file ensuring that Opencast is not run twice at the same time.
karaf.lock.dir=${karaf.data}

# Setting or deactivating the remote shutdown port in Apache Karaf. Commenting this out will make Karaf listen to a
# random shutdown port on localhost, announcing it via ${karaf.shutdown.port.file}. Setting this to -1 will deactivate
# the shutdown port. Note that the stop script is based on this and will not work any longer if the port is deactivated.
#karaf.shutdown.port=-1

# Specifies the location of the port file for Opencast. It is used by the shutdown script to send the shutdown command
# to the main process.
karaf.shutdown.port.file=${karaf.data}/port

# Command for shutting down Opencast. If the shutdown port is enabled, Opencast will listen for this command to initiate
# the shut down procedure.
# Change this to something secret
karaf.shutdown.command=3500d4e3-ce93-4ae3-abb4-5e90cef4deb

# Specifies the location of the PID file for Opencast. It is used by the shutdown script to synchronously shut down
# Opencast as it will wait for the process with the given process id. Removing this will cause the network port to be
# used as fallback.
karaf.pid.file=${karaf.data}/pid


######### Miscellaneous #########

# Send server configuration data to the Opencast project to help us track how people are using Opencast.  No security
# related information will be sent to the opencast project.  Comment this out to disable this feature.
#org.opencastproject.anonymous.feedback.url=http://opencast.org/form/tracking

# The mount point of the OAI-PMH servlet.
# Please make sure that the path configured is accessible without any login (see security.xml)
# This setting is configured here and not in the OAI-PMH server's config since it is shared amongst several
# OAI-PMH related components.
#org.opencastproject.oaipmh.mountpoint=/oaipmh

# This changes the number of seconds from when an internal request is made until a signed URL will expire. More
# specifically, the HTTP client needs access to internal storage areas such as the working file repository as well as to
# distributed artifacts on the downloads and streaming servers, all of which are protected by verification components.
# Default is 60 seconds as it shouldn't take longer than that to make a request to a server. This will have no impact on
# a system where url signing is not configured. For more information please see:
# http://docs.opencast.org/latest/admin/configuration/stream-security/#configuration-of-url-signing-timeout-values
#org.opencastproject.security.internal.url.signing.duration=60


