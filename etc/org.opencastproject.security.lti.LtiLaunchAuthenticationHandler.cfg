# OAuth consumer keys with should be highly trusted.
#
# By default OAuth consumer are regarded as untrusted and a user authenticating via such
# systems receives a rewritten username in the form of "lti:{ltiConsumerGUID}:{ltiUserID}".
# This user is regarded as a new user temporarily existing for the duration of the session.
# Opencast roles associated with the original user will not be attached to this user.
#
# Usernames of users authenticating via highly trusted systems will not be rewritten except
# for the cases configured in the additional options below.
#
# Note that marking a consumer key as highly trusted can be a security risk. If the usernames of sensitive Opencast
# users are not blacklisted, the LMS administrator could create LMS users with the same username and use LTI to grant
# that user access to Opencast. In the default configuration, that includes the `admin` and `opencast_system_account`
# users.
#
# Multiple consumer keys can be configured, by incrementing the counter. The list is read
# sequentially incrementing the counter. If you miss any numbers it will stop looking for
# further consumer keys.
#lti.oauth.highly_trusted_consumer_key.1=CONSUMERKEY

# Allow the Opencast system administrator user to authenticate as such via LTI.
#
# Note that this user may still authenticate via LTI, but the username will be rewritten,
# even if a trusted OAuth consumer key is used.
#
# Note that this option does not apply to custom users having the ROLE_ADMIN. Use the
# blacklist below instead.
#
# Default: false
#lti.allow_system_administrator=false

# Allow the Opencast digest user to authenticate as such via LTI.
#
# Note that this user may still authenticate via LTI, but the username will be rewritten,
# even if a trusted OAuth consumer key is used.
#
# Default: false
#lti.allow_digest_user=false

# A blacklist of users not allowed to authenticate via LTI as themselves.
#
# Note that these users may still authenticate via LTI, but their username will be rewritten,
# even if a trusted OAuth consumer key is used.
#
# Multiple users can be configured, by incrementing the counter. The list is read sequentially
# incrementing the counter. If you miss any numbers it will stop looking for further users.
#
# Default: no blacklisted users
#lti.blacklist.user.1=

# Determines whether a JpaUserReference should be created on LTI User Login.
#
# This persists the LTI Users in the database, giving them the ability to create long running tasks like ingesting a video.
#
# Default: true
#lti.create_jpa_user_reference=true

# Add Custom Roles to users who has the role with custom_role_name
# Default: empty no custom roles

#lti.custom_role_name=Instructor
#This Role set is an example for a user which can open the editor for an event and upload videos via opencast studio.
#lti.custom_roles=ROLE_ADMIN_UI,ROLE_API_EVENTS_METADATA_DELETE,ROLE_API_EVENTS_METADATA_EDIT,ROLE_API_EVENTS_METADATA_VIEW,ROLE_UI_EVENTS_DETAILS_COMMENTS_CREATE,ROLE_UI_EVENTS_DETAILS_COMMENTS_DELETE,ROLE_UI_EVENTS_DETAILS_COMMENTS_EDIT,ROLE_UI_EVENTS_DETAILS_COMMENTS_REPLY,ROLE_UI_EVENTS_DETAILS_COMMENTS_RESOLVE,ROLE_UI_EVENTS_DETAILS_COMMENTS_VIEW,ROLE_UI_EVENTS_EDITOR_EDIT,ROLE_UI_EVENTS_EDITOR_VIEW,ROLE_STUDIO

# Prefix for LTI context based roles based on OAuth consumer keys.
# The LTI context (e.g. the course identifier) is used to generate context roles like “12345_Learner”.
# If multiple LTI consumers are used, this can clash, causing users from one consumer to get access to content from
# another consumer. The prefix can be used to prevent this by generating context roles like “PREFIX1_123_Learner” and
# “PREFIX2_123_Learner” instead.
#
# Context roles may not start with “ROLE_”. Avoid using that as a prefix.
#
# Default: No prefix
#
#lti.consumer_role_prefix.CONSUMERKEY0 = STUDIP_
#lti.consumer_role_prefix.CONSUMERKEY1 = MOODLE_
#lti.consumer_role_prefix.CONSUMERKEY2 = ILIAS_
