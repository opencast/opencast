####
# Profile definitions for the encoding service.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track types for which this format is applicable.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
#
# profile.<format>.jobload:
#     The job load for this specific encoding profile.
##

# The video distribution profile, optimized for parallel encoding of multiple
# qualities for adaptive streaming
profile.adaptive-parallel.http.name = parallel encode 480p and 720p and conditionally 1080p and 2160p qualities for adaptive streaming
profile.adaptive-parallel.http.input = visual
profile.adaptive-parallel.http.output = visual
profile.adaptive-parallel.http.jobload = 4
profile.adaptive-parallel.http.suffix.480p-quality = -480p.mp4
profile.adaptive-parallel.http.suffix.720p-quality = -720p.mp4
profile.adaptive-parallel.http.suffix.1080p-quality = -1080p.mp4
profile.adaptive-parallel.http.suffix.1440p-quality = -1440p.mp4
profile.adaptive-parallel.http.suffix.2160p-quality = -2160p.mp4
profile.adaptive-parallel.http.ffmpeg.command.if-width-or-height-geq-1600-900 = \
  -filter:v scale=1920:1920:force_original_aspect_ratio=decrease:force_divisible_by=2,fps=25 \
    -pix_fmt yuv420p \
    -c:v libx264 -profile:v high -level 4.0 -crf 23 \
    -x264opts keyint=25:min-keyint=25:no-scenecut -maxrate 4000k -bufsize 8000k \
    -c:a aac -b:a 96k -ac 2 \
    -movflags faststart #{out.dir}/#{out.name}#{out.suffix.1080p-quality}
profile.studio.adaptive-parallel.http.ffmpeg.command.if-width-or-height-geq-2440-1260 = \
  -filter:v scale=2560:2560:force_original_aspect_ratio=decrease:force_divisible_by=2,fps=25 \
    -pix_fmt yuv420p \
    -c:v libx264 -profile:v high -level 5.0 -crf 23 \
    -x264opts keyint=25:min-keyint=25:no-scenecut -maxrate 9800k -bufsize 19600k \
    -c:a aac -b:a 96k -ac 2 \
    -movflags faststart #{out.dir}/#{out.name}#{out.suffix.1440p-quality}
profile.adaptive-parallel.http.ffmpeg.command.if-width-or-height-geq-3200-1800 = \
  -filter:v scale=3840:3840:force_original_aspect_ratio=decrease:force_divisible_by=2,fps=25 \
    -pix_fmt yuv420p \
    -c:v libx264 -profile:v high -level 5.1 -crf 23 \
    -x264opts keyint=25:min-keyint=25:no-scenecut -maxrate 14800k -bufsize 29600k \
    -c:a aac -b:a 96k -ac 2 \
    -movflags faststart #{out.dir}/#{out.name}#{out.suffix.2160p-quality}
profile.adaptive-parallel.http.ffmpeg.command = -i #{in.video.path} \
  -filter:v scale=854:854:force_original_aspect_ratio=decrease:force_divisible_by=2,fps=25 \
    -pix_fmt yuv420p \
    -c:v libx264 -profile:v high -level 4.0  -crf 23 \
    -x264opts keyint=25:min-keyint=25:no-scenecut -maxrate 800k -bufsize 1600k \
    -c:a aac -b:a 64k -ac 2 \
    -movflags faststart #{out.dir}/#{out.name}#{out.suffix.480p-quality} \
  -filter:v scale=1280:1280:force_original_aspect_ratio=decrease:force_divisible_by=2,fps=25 \
    -pix_fmt yuv420p \
    -c:v libx264 -profile:v high -level 4.0  -crf 23 \
    -x264opts keyint=25:min-keyint=25:no-scenecut -maxrate 1200k -bufsize 2400k \
    -c:a aac -b:a 96k -ac 2 \
    -movflags faststart #{out.dir}/#{out.name}#{out.suffix.720p-quality} \
  #{if-width-or-height-geq-1600-900} \
  #{if-width-or-height-geq-2440-1260} \
  #{if-width-or-height-geq-3200-1800}

# Preview image for the player, shown before the movie is started
profile.player-preview.http.name = cover image for engage
profile.player-preview.http.input = visual
profile.player-preview.http.output = image
profile.player-preview.http.suffix = -player.jpg
profile.player-preview.http.ffmpeg.command = -i #{in.video.path} -frames:v 1 \
  -filter:v select=eq(n\\,1)+lt(t\\,#{time}),fps=25,reverse,scale=-2:720 \
  #{out.dir}/#{out.name}#{out.suffix}

# Slide preview images as shown in the player
profile.player-slides.http.name = slide preview image for engage
profile.player-slides.http.input = visual
profile.player-slides.http.output = image
profile.player-slides.http.suffix = .#{time}.jpg
profile.player-slides.http.ffmpeg.command = -ss #{time} -i #{in.video.path} \
  -r 1 -frames:v 1 -filter:v scale=160:-1 \
  #{out.dir}/#{out.name}#{out.suffix}

# Cover image for search results
profile.search-cover.http.name = cover image for engage
profile.search-cover.http.input = visual
profile.search-cover.http.output = image
profile.search-cover.http.suffix = -search.jpg
profile.search-cover.http.ffmpeg.command = -i #{in.video.path} -frames:v 1 \
  -filter:v select=eq(n\\,1)+lt(t\\,#{time}),fps=25,reverse,scale=160:-2 \
  #{out.dir}/#{out.name}#{out.suffix}

profile.mp4-preview.http.name = preview video
profile.mp4-preview.http.input = visual
profile.mp4-preview.http.output = visual
profile.mp4-preview.http.suffix = -preview.mp4
profile.mp4-preview.http.ffmpeg.command = -i #{in.video.path} \
  -filter:v scale=-2:360 \
  -c:v libx264 -preset veryfast -crf 23 -profile:v baseline -pix_fmt yuv420p -tune film \
  -c:a aac -ar 22050 -ab 64k \
  -movflags faststart #{out.dir}/#{out.name}#{out.suffix}

profile.mp4-preview.dual.http.name = preview video (picture-by-picture)
profile.mp4-preview.dual.http.input = visual
profile.mp4-preview.dual.http.output = visual
profile.mp4-preview.dual.http.suffix = -preview-composite.mp4
profile.mp4-preview.dual.http.ffmpeg.command = -i #{in.video.path} \
  #{compositeCommand} \
  -c:v libx264 -preset veryfast -crf 23 -profile:v baseline -pix_fmt yuv420p -tune film \
  -c:a aac -ar 22050 -ab 64k \
  -movflags faststart  \
  #{out.dir}/#{out.name}#{out.suffix}

# Distribution format definition
profile.fast.http.name = fast processed mp4
profile.fast.http.input = visual
profile.fast.http.output = visual
profile.fast.http.suffix = .mp4
profile.fast.http.ffmpeg.command = -i #{in.video.path} \
  -filter:v crop=in_w/2*2:in_h/2*2 \
  -c:a aac -c:v libx264 -preset faster -g 30 -pix_fmt yuv420p \
  #{out.dir}/#{out.name}#{out.suffix}

# Cover image for atom and rss feeds
profile.feed-cover.http.name = cover image for feeds
profile.feed-cover.http.input = visual
profile.feed-cover.http.output = image
profile.feed-cover.http.suffix = -feed.jpg
profile.feed-cover.http.ffmpeg.command = -ss #{time} -i #{in.video.path} \
  -r 1 -frames:v 1 -filter:v scale=-1:54 \
  #{out.dir}/#{out.name}#{out.suffix}

# Image to video
profile.image-movie.work.name = image to video
profile.image-movie.work.input = image
profile.image-movie.work.output = visual
profile.image-movie.work.suffix = -image-video.mp4
profile.image-movie.work.ffmpeg.command = -loop 1 -i #{in.video.path} \
  -vf "crop=trunc(iw/2)*2:trunc(ih/2)*2" \
  -c:v libx264 -r 30 -t #{time} -pix_fmt yuv420p \
  #{out.dir}/#{out.name}#{out.suffix}

# Extract video preview image for video editor
profile.editor.tracks.preview.name = Video preview image for video editor
profile.editor.tracks.preview.input = visual
profile.editor.tracks.preview.output = image
profile.editor.tracks.preview.suffix = -preview.jpg
profile.editor.tracks.preview.mimetype = image/jpeg
profile.editor.tracks.preview.ffmpeg.command = -ss #{time} -i #{in.video.path} \
  -r 1 -frames:v 1 -filter:v scale=320:-1 \
  #{out.dir}/#{out.name}#{out.suffix}

profile.composite.http.name = composite
profile.composite.http.input = visual
profile.composite.http.output = visual
profile.composite.http.suffix = -compound.mkv
profile.composite.http.ffmpeg.command = -i #{in.video.path} #{compositeCommand} \
  -c:v libx264 -crf 10 -preset fast \
  -c:a flac \
  #{out.dir}/#{out.name}#{out.suffix}

profile.concat.work.name = concat
profile.concat.work.input = visual
profile.concat.work.output = visual
profile.concat.work.suffix = -concatenated.mkv
profile.concat.work.ffmpeg.command = #{concatCommand} \
  -c:v libx264 -crf 10 -preset fast \
  -c:a flac \
  #{out.dir}/#{out.name}#{out.suffix}

# Re-mux audiovisual stream
#   This command will take both a video and an audio streams from one source
#   file and muxes them into the same kind of container they were in before. A
#   general re-encoding will not happen, but if the duration of both streams
#   differ, the longer one will be cut.
profile.av.copy.name = Re-encode audiovisual track
profile.av.copy.input = stream
profile.av.copy.output = audiovisual
profile.av.copy.suffix = -copy.#{in.video.suffix}
profile.av.copy.ffmpeg.command = -i #{in.video.path} -shortest \
  -c copy #{out.dir}/#{out.name}#{out.suffix}

# Mux one audio and one video stream
#   These commands will take two files (video and audio) and mux the contained
#   streams.  The container format used is the same as it was for the source
#   video file. The streams will not be re-encoded, but if the duration of both
#   streams differ, the longer one will be cut.
# Used by PrepareAV, SelectTracks workflow operation
profile.mux-av.copy.name = mux audio and video
profile.mux-av.copy.input = stream
profile.mux-av.copy.output = visual
profile.mux-av.copy.suffix = -copy.#{in.video.suffix}
profile.mux-av.copy.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest \
  -c copy -map 0:v:0 -map 1:a:0 #{out.dir}/#{out.name}#{out.suffix}

# Audio only (strip video)
#   This command will copy the audio streams into a new container. The
#   container type will be the same as it was used for the source video.
# Used by PrepareAV, SelectTracks workflow operation
profile.audio-only.copy.name = audio only
profile.audio-only.copy.input = visual
profile.audio-only.copy.output = audio
profile.audio-only.copy.suffix = -copy.#{in.video.suffix}
profile.audio-only.copy.ffmpeg.command = -i #{in.video.path} \
  -c:a copy -vn #{out.dir}/#{out.name}#{out.suffix}

# Video only (strip audio)
#   This command will copy the video streams into a new container. The
#   container type will be the same as it was used for the source video.
# Used by PrepareAV, SelectTracks workflow operation
profile.video-only.copy.name = video only
profile.video-only.copy.input = visual
profile.video-only.copy.output = visual
profile.video-only.copy.suffix = -copy.#{in.video.suffix}
profile.video-only.copy.ffmpeg.command = -i #{in.video.path} \
  -c:v copy -an #{out.dir}/#{out.name}#{out.suffix}

# Used in the Studio Upload Workflow
profile.scale.fhd.framerate.fix.name = Scale video to maximum resolution of FHD and set framerate to 25
profile.scale.fhd.framerate.fix.input = stream
profile.scale.fhd.framerate.fix.output = audiovisual
profile.scale.fhd.framerate.fix.suffix = .mp4
profile.scale.fhd.framerate.fix.ffmpeg.command = -i #{in.video.path} \
  -max_muxing_queue_size 1000 \
  -filter:v scale=w='trunc(min(max(1920\\,in_w)\\,in_w)/2)*2':'trunc(out_w/dar/2)*2',setsar=1,fps=25 \
  -c:a aac -ab 128k \
  -c:v libx264 -crf 21 \
  -movflags +faststart \
  #{out.dir}/#{out.name}#{out.suffix}

# Still image extraction for text analysis (ocr)
profile.text-analysis.http.name = still image for text extraction
profile.text-analysis.http.input = visual
profile.text-analysis.http.output = image
profile.text-analysis.http.suffix = .#{time}.png
profile.text-analysis.http.ffmpeg.command = -ss #{time} -i #{in.video.path} \
  -filter:v curves=preset=increase_contrast \
  -frames:v 1 -pix_fmt:v gray -r 1 #{out.dir}/#{out.name}#{out.suffix}