####
# Auxiliary movie and image profile definitions, mostly for the media analysis
# services.
#
# ATTENTION:
#
# Do not change the identifier of the formats below. Media analysis and other
# services are relying on them.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track types for which this format is applicable.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
##

# Re-mux audiovisual stream
#   This command will take both a video and an audio streams from one source
#   file and muxes them into the same kind of container they were in before. A
#   general re-encoding will not happen, but if the duration of both streams
#   differ, the longer one will be cut.
profile.av.prepared.name = Re-encode audiovisual track
profile.av.prepared.input = stream
profile.av.prepared.output = audiovisual
profile.av.prepared.suffix = -prepared.#{in.video.suffix}
profile.av.prepared.ffmpeg.command = -i #{in.video.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

# Mux one audio and one video stream
#   These commands will take two files (video and audio) and mux the contained
#   streams.  The container format used is the same as it was for the source
#   video file. The streams will not be re-encoded, but if the duration of both
#   streams differ, the longer one will be cut.
#   Since this is used by multiple workflow operation handlers, the encoding
#   profile is duplicated to allow an independent configuration.

# Used by PrepareAV workflow operation
profile.mux-av.prepared.name = mux audio and video
profile.mux-av.prepared.input = stream
profile.mux-av.prepared.output = visual
profile.mux-av.prepared.suffix = -prepared.#{in.video.suffix}
profile.mux-av.prepared.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -c copy -map 0:v:0 -map 1:a:0 #{out.dir}/#{out.name}#{out.suffix}

# Used by SelectTracks workflow operation
profile.mux-av.work.name = mux audio and video
profile.mux-av.work.input = stream
profile.mux-av.work.output = visual
profile.mux-av.work.suffix = -work.#{in.video.suffix}
profile.mux-av.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -c copy -map 0:v:0 -map 1:a:0 #{out.dir}/#{out.name}#{out.suffix}


# Trim a stream
#   This command will trim and input stream. Trimming will be fast, as no
#   re-encoding takes place. It will, however, not be frame accurate.
profile.trim.work.name = trim track
profile.trim.work.input = stream
profile.trim.work.output = visual
profile.trim.work.suffix = -trimmed.#{in.video.suffix}
profile.trim.work.ffmpeg.command = -ss #{trim.start} -i #{in.video.path} -t #{trim.duration} -c copy #{out.dir}/#{out.name}#{out.suffix}

# SoX Audio only (strip video)
profile.sox-audio-only.work.name = sox audio only
profile.sox-audio-only.work.input = visual
profile.sox-audio-only.work.output = audio
profile.sox-audio-only.work.suffix = -work.flac
profile.sox-audio-only.work.ffmpeg.command = -i #{in.video.path} -vn -c:a flac #{out.dir}/#{out.name}#{out.suffix}

# SoX replace Audio (replace audio)
profile.sox-audio-replace.work.name = sox replace audio
profile.sox-audio-replace.work.input = visual
profile.sox-audio-replace.work.output = visual
profile.sox-audio-replace.work.suffix = -work.#{in.video.suffix}
profile.sox-audio-replace.work.ffmpeg.command = -strict -2 -i #{in.audio.path} -i #{in.video.path} -map 1:v -map 0:a -c:v copy #{out.dir}/#{out.name}#{out.suffix}

# Audio only (strip video)
#   This command will copy the audio streams into a new container. The
#   container type will be the same as it was used for the source video.
#   Since this is used by multiple workflow operation handlers, the encoding
#   profile is duplicated to allow an independent configuration.

# Used by PrepareAV workflow operation
profile.audio-only.prepared.name = audio only
profile.audio-only.prepared.input = visual
profile.audio-only.prepared.output = audio
profile.audio-only.prepared.suffix = -prepared.#{in.video.suffix}
profile.audio-only.prepared.ffmpeg.command = -i #{in.video.path} -c:a copy -vn #{out.dir}/#{out.name}#{out.suffix}

# Used by SelectTracks workflow operation
profile.audio-only.work.name = audio only
profile.audio-only.work.input = visual
profile.audio-only.work.output = audio
profile.audio-only.work.suffix = -work.#{in.video.suffix}
profile.audio-only.work.ffmpeg.command = -i #{in.video.path} -c:a copy -vn #{out.dir}/#{out.name}#{out.suffix}

# Video only (strip audio)
#   This command will copy the video streams into a new container. The
#   container type will be the same as it was used for the source video.
#   Since this is used by multiple workflow operation handlers, the encoding
#   profile is duplicated to allow an independent configuration.

# Used by PrepareAV workflow operation
profile.video-only.prepared.name = video only
profile.video-only.prepared.input = visual
profile.video-only.prepared.output = visual
profile.video-only.prepared.suffix = -prepared.#{in.video.suffix}
profile.video-only.prepared.ffmpeg.command = -i #{in.video.path} -c:v copy -an #{out.dir}/#{out.name}#{out.suffix}

# Used by SelectTracks workflow operation
profile.video-only.work.name = video only
profile.video-only.work.input = visual
profile.video-only.work.output = visual
profile.video-only.work.suffix = -work.#{in.video.suffix}
profile.video-only.work.ffmpeg.command = -i #{in.video.path} -c:v copy -an #{out.dir}/#{out.name}#{out.suffix}


# Composite
#   This profile is used for the composite workflow operation which puts
#   several input videos on a single canvas. The new video is put into an
#   Matroska container and encoded using the lossless flac encoder and libx264
#   with high quality settings.  You can change the value of -preset (i.e.
#   faster) if you want this to be faster (it will cost you space) and the
#   quality (-crf).
profile.composite.http.name = composite
profile.composite.http.input = visual
profile.composite.http.output = visual
profile.composite.http.suffix = -compound.mkv
profile.composite.http.ffmpeg.command = -i #{in.video.path} #{compositeCommand} -c:a flac -c:v libx264 -crf 10 -preset fast #{out.dir}/#{out.name}#{out.suffix}

# Concat
#   This profile is used for the concat workflow. Note that all concationation
#   operations done here are lossy. The new video is put into an Matroska
#   container and encoded using the flac audio encoder and libx264 with high
#   quality settings.  You can change the value of -preset (i.e. faster) if you
#   want this to be faster (it will cost you space) and the quality (-crf).
profile.concat.work.name = concat
profile.concat.work.input = visual
profile.concat.work.output = visual
profile.concat.work.suffix = -concatenated.mkv
profile.concat.work.ffmpeg.command = #{concatCommand} -c:a flac -c:v libx264 -crf 10 -preset fast #{out.dir}/#{out.name}#{out.suffix}

# Concat - lossless concat
# Source files must be of the same dimension and codecs and they will be used in the target
# It uses ffmpeg concat demuxer
# command line is "ffmpeg -f concat -safe 0 -i mylist.txt -c copy output"
# where mylist.txt contains one line per file for each track: file '<full pathname>'
profile.concat-samecodec.work.name = concat-samecodec
profile.concat-samecodec.work.input = visual
profile.concat-samecodec.work.output = visual
profile.concat-samecodec.work.suffix = -concatenated.#{in.video.suffix}
profile.concat-samecodec.work.ffmpeg.command = #{concatCommand} -c copy #{out.dir}/#{out.name}#{out.suffix}

# Generate silent audio tracks for filling gaps for partial import operation
profile.import.silent.name = Generate silent audio tracks for filling gaps
profile.import.silent.input = nothing
profile.import.silent.output = audio
profile.import.silent.suffix = -silent-audio.mp4
profile.import.silent.ffmpeg.command = -strict -2 -filter_complex aevalsrc=0:d=#{time} -c:a aac -b:a 8k -ar 44100 #{out.dir}/#{out.name}#{out.suffix}

# Transcode videos generated with opencast studio to cover some issues
# The video resolution should be reduced to maximum of 1080p.
# The video resolution should be dividable by 2 as the x264 encoder expect this.
# the framerate should be fixed t0 25
profile.scale.fhd.framerate.fix.name = Scale video to maximum resolution of FHD and set framerate to 25
profile.scale.fhd.framerate.fix.input = stream
profile.scale.fhd.framerate.fix.output = audiovisual
profile.scale.fhd.framerate.fix.suffix = .mp4
profile.scale.fhd.framerate.fix.ffmpeg.command = -i #{in.video.path} \
  -max_muxing_queue_size 1000 \
  -filter:v scale=w='trunc(min(max(1920\\,in_w)\\,in_w)/2)*2':'trunc(out_w/dar/2)*2',setsar=1,fps=25 \
  -c:a aac -ab 128k \
  -c:v libx264 -crf 21 \
  -movflags +faststart \
  #{out.dir}/#{out.name}#{out.suffix}

# Editor
#   This profile is used as a preview and work copy for the video editor.
#   The gnonlin component in the gstreamer based video editor modules needs
#   an mp4 codec to work reliable. This could also be used for the web preview
#   although the file might be quite large for web distribution

profile.editor.work.name = editor
profile.editor.work.input = audiovisual
profile.editor.work.output = audiovisual
profile.editor.work.suffix = -editor.mp4
profile.editor.work.mimetype = video/mp4
profile.editor.work.ffmpeg.command = -i #{in.video.path} -filter:v crop=trunc(iw/2)*2:trunc(ih/2)*2,fps=25 -shortest -c:v libx264 -preset superfast -pix_fmt yuv420p -crf 18 -c:a aac -strict -2 -b:a 196k #{out.dir}/#{out.name}#{out.suffix}

# Preencode
#   Used by partial import to make all videos have the same resolution,
#   codec, framerate and samplerate to allow for usage of the concat
#   demuxer.
#   MUST specify the same framerate as image-movie.work
profile.partial-import-preencode.name = partial-import-preencode
profile.partial-import-preencode.input = audiovisual
profile.partial-import-preencode.output = audiovisual
profile.partial-import-preencode.suffix = -preencoded.mp4
profile.partial-import-preencode.mimetype = video/mp4
profile.partial-import-preencode.ffmpeg.command = -i #{in.video.path} \
  -filter:v scale=1920:-2,fps=30 \
  -shortest -c:v libx264 -pix_fmt yuv420p \
  -c:a aac -b:a 196k \
  -ar 44100 \
  #{out.dir}/#{out.name}#{out.suffix}
