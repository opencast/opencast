####
# Auxiliary movie and image profile definitions, mostly for the media analysis
# services.
#
# ATTENTION:
#
# Do not change the identifier of the formats below. Media analysis and other 
# services are relying on them.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track types for which this format is applicable.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
##

# Re-mux audiovisual stream
#   This command will take both a video and an audio streams from one source
#   file and muxes them into the same kind of container they were in before. A
#   general re-encoding will not happen, but if the duration of both streams
#   differ, the longer one will be cut.
profile.av.work.name = Re-encode audiovisual track
profile.av.work.input = stream
profile.av.work.output = audiovisual
profile.av.work.suffix = -work.#{in.video.suffix}
profile.av.work.ffmpeg.command = -i #{in.video.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix}

# Mux one audio and one video stream
#   This command will take two files (video and audio) and mux the contained
#   streams.  The container format used is the same as it was for the source
#   video file. The streams will not be re-encoded, but if the duration of both
#   streams differ, the longer one will be cut.
profile.mux-av.work.name = mux audio and video
profile.mux-av.work.input = stream
profile.mux-av.work.output = visual
profile.mux-av.work.suffix = -work.#{in.video.suffix}
profile.mux-av.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -c copy #{out.dir}/#{out.name}#{out.suffix} 

# Trim a stream
#   This command will trim and input stream. Trimming will be fast, as no
#   re-encoding takes place. It will, however, not be frame accurate.
profile.trim.work.name = trim track
profile.trim.work.input = stream
profile.trim.work.output = visual
profile.trim.work.suffix = -trimmed.#{in.video.suffix}
profile.trim.work.ffmpeg.command = -ss #{trim.start} -i #{in.video.path} -t #{trim.duration} -c copy #{out.dir}/#{out.name}#{out.suffix}

# SoX Audio only (strip video)
profile.sox-audio-only.work.name = sox audio only
profile.sox-audio-only.work.input = visual
profile.sox-audio-only.work.output = audio
profile.sox-audio-only.work.suffix = -work.flac
profile.sox-audio-only.work.ffmpeg.command = -i #{in.video.path} -c:a flac #{out.dir}/#{out.name}#{out.suffix}

# SoX replace Audio (replace audio)
profile.sox-audio-replace.work.name = sox replace audio
profile.sox-audio-replace.work.input = visual
profile.sox-audio-replace.work.output = visual
profile.sox-audio-replace.work.suffix = -work.#{in.video.suffix}
profile.sox-audio-replace.work.ffmpeg.command = -strict -2 -i #{in.audio.path} -i #{in.video.path} -map 1:v -map 0:a -c:v copy #{out.dir}/#{out.name}#{out.suffix}

# Audio only (strip video)
#   This command will copy the audio streams into a new container. The
#   container type will be the same as it was used for the source video.
profile.audio-only.work.name = audio only
profile.audio-only.work.input = visual
profile.audio-only.work.output = audio
profile.audio-only.work.suffix = -work.#{in.video.suffix}
profile.audio-only.work.ffmpeg.command = -i #{in.video.path} -c:a copy -vn #{out.dir}/#{out.name}#{out.suffix}

# Video only (strip audio)
#   This command will copy the video streams into a new container. The
#   container type will be the same as it was used for the source video.
profile.video-only.work.name = video only
profile.video-only.work.input = visual
profile.video-only.work.output = visual
profile.video-only.work.suffix = -work.#{in.video.suffix}
profile.video-only.work.ffmpeg.command = -i #{in.video.path} -c:v copy -an #{out.dir}/#{out.name}#{out.suffix}

# Composite
#   This profile is used for the composite workflow operation which puts
#   several input videos on a single canvas. The new video is put into an
#   Matroska container and encoded using the lossless flac encoder and libx264
#   with high quality settings.  You can change the value of -preset (i.e.
#   faster) if you want this to be faster (it will cost you space) and the
#   quality (-crf).
profile.composite.http.name = composite
profile.composite.http.input = visual
profile.composite.http.output = visual
profile.composite.http.suffix = -compound.mkv
profile.composite.http.mimetype = video/x-matroska
profile.composite.http.ffmpeg.command = -i #{in.video.path} #{compositeCommand} -c:a flac -c:v libx264 -crf 10 -preset fast #{out.dir}/#{out.name}#{out.suffix}

# Concat
#   This profile is used for the concat workflow. Note that all concationation
#   operations done here are lossy. The new video is put into an Matroska
#   container and encoded using the flac audio encoder and libx264 with high
#   quality settings.  You can change the value of -preset (i.e. faster) if you
#   want this to be faster (it will cost you space) and the quality (-crf).
profile.concat.work.name = concat
profile.concat.work.input = visual
profile.concat.work.output = visual
profile.concat.work.suffix = -concatenated.mkv
profile.concat.work.mimetype = video/x-matroska
profile.concat.work.ffmpeg.command = #{concatCommand} -c:a flac -c:v libx264 -crf 10 -preset fast #{out.dir}/#{out.name}#{out.suffix}


# Non-lossy concat (uses source codec)
# Lossless and very fast if used with concat with same-codec option (files must be of the same dimension and codec)
# which Uses ffmpeg concat demuxer
# command line is "ffmpeg -f concat -safe 0 -i mylist.txt -c copy output"
# where mylist.txt contains one line per file for each track: file '<full pathname>'
profile.concat-samecodec.name = concat-samecodec
profile.concat-samecodec.input = visual
profile.concat-samecodec.output = visual
profile.concat-samecodec.suffix = -concatenated.#{in.video.suffix}
profile.concat-samecodec.mimetype = video/mp4
profile.concat-samecodec.ffmpeg.command = #{concatCommand} -c copy #{out.dir}/#{out.name}#{out.suffix}

# Generate silent audio tracks for filling gaps for partial import operation
profile.import.silent.name = Generate silent audio tracks for filling gaps
profile.import.silent.input = nothing
profile.import.silent.output = audio
profile.import.silent.suffix = -silent-audio.mp4
profile.import.silent.mimetype = audio/mp4
profile.import.silent.ffmpeg.command = -strict -2 -filter_complex aevalsrc=0::d=#{time} -c:a aac -b:a 8k #{out.dir}/#{out.name}#{out.suffix}

# Demux a multi-track avi file into presenter and presentation (this one works for epiphan)
# The order of the output matters - presenter first, then presentation
profile.multitrack-demux.name = multitrack-demux
profile.multitrack-demux.input = visual
profile.multitrack-demux.output = visual
profile.multitrack-demux.suffix = -30fps.mp4
profile.multitrack-demux.mimetype = video/mp4
# There is a .149s offset to adjust for lipsync
profile.multitrack-demux.ffmpeg.command = -strict unofficial -i #{in.video.path} -map 0:0 -map 0:1 -c:v copy -c:a copy #{out.dir}/#{out.name}_presenter#{out.suffix} -c:v copy -c:a copy -map 0:2 -map 0:3  #{out.dir}/#{out.name}_presentation#{out.suffix}

# Summing the audio in 2 channels and make it mono in both channels
profile.stereo-to-mono.name = Sum audio into dual channel mono
profile.stereo-to-mono.input = stream
profile.stereo-to-mono.output = audiovisual
profile.stereo-to-mono.suffix = .#{in.video.suffix}
profile.stereo-to-mono.mimetype = video/mp4
profile.stereo-to-mono.ffmpeg.command = -strict -2 -i #{in.video.path} -filter_complex [0:a]pan=mono|c0=c0+c1[amon1];[0:a]pan=mono|c0=c0+c1[amon2];[amon1][amon2]amix[aout] -map 0:v -map [aout] -ac 2 -c:v copy -c:a libfdk_aac -ab 280k -strict -2 #{out.dir}/#{out.name}#{out.suffix}
