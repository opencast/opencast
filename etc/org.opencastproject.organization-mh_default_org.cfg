# Organization (tenant) definition.
#
# With Opencast being capable of hosting multiple tenants per installation, there needs
# to be one organization configuration per tenant.
#
# Therefore, in order to add another tenant to the installation, put a file named
# org.opencastproject.organization-<tenant id>.cfg into Opencast's "load" directory.
# Make sure to adjust at least the following fields to properly map the new tenant to the
# installation:
#
#   - id
#   - server
#   - port
#   - prop.org.opencastproject.admin.ui.url
#   - prop.org.opencastproject.engage.ui.url
#   - prop.org.opencastproject.external.api.url
#   - prop.org.opencastproject.assetmanager.url
#

# Identifier of the tenant on this Opencast installation.
#
# The identifier is used to map data that belongs to this tenant only as well as during
# lookup of related configuration entities such as the security settings in etc/security.
#
# Value: a text identifier using [a-Z, 0..9, _, -] as characters.
#
id=mh_default_org

# Name of the organization (tenant).
#
# Value: <text>
#
name=Opencast Project

# Server names that belong to this organization (tenant)
#
# Use the public domain names which are assigned to this tenant. Multiple values can be separated by comma. The final
# set of domain names identifying this organization within Opencast will be the union of all domains defined on all
# nodes.
#
# The usage of this is to map a request to a specific organization. For example, if admin-a.opencast.org is configured
# as part of this organizations server list and an HTTP request uses this domain name, Opencast knows that the requests
# belongs to this organization.
#
# If multi-tenancy is not configured (only one tenant in the system), organization mapping will automatically fall back
# to the default organization regardless of this keys value, making it unnecessary to configure this at all.
#
# Important notices:
#  - Values read from here are stored in the database (table oc_organization_node) and will not be removed if a node is
#    removed from this list.
#  - Do not include schema or port but use the domain name only.
#
# Value: <domain name 1>[,<domain name 2>,â€¦]
#
server=localhost

# Port for this tenant.
#
# When run behind a proxy server, set this to -1 since most proxies won't forward the
# original port and set the corresponding field in the request to this value.
#
# Value: <integer port number>
#
port=8080

# Identifier of the Administrative role.
#
# Value: a text identifier using [a-Z, 0..9, _, -] as characters.
# Default: ROLE_ADMIN
#
admin_role=ROLE_ADMIN

# Identifier of the Anonymous role.
#
# Value: a text identifier using [a-Z, 0..9, _, -] as characters.
# Default: ROLE_ANONYMOUS
#
anonymous_role=ROLE_ANONYMOUS

# The base URL of the file server. When using a shared filesystem between servers, set all servers to use the same URL.
# Only then will hard linking between the working file repository and the workspace be enabled to prevent downloads.
#
# Value: <a complete url with scheme and port>
# Default: the value of ${org.opencastproject.server.url}
#
#prop.org.opencastproject.file.repo.url=${prop.org.opencastproject.admin.ui.url}

# Link to the Admin UI.
#
# Value: <a complete url with scheme and port>
# Default: ${org.opencastproject.server.url}
#
#prop.org.opencastproject.admin.ui.url=http://localhost:8080

###
# OAI-PMH

# The host URL of the OAI-PMH server. Remember to omit the mount point since it is read
# from custom.properties -> org.opencastproject.oaipmh.mountpoint
prop.org.opencastproject.oaipmh.server.hosturl=${prop.org.opencastproject.engage.ui.url}

# Link to the Opencast documentation.
#
# If the property is specified, the admin ui help menu will link to the documentation.
# The value needs to be a URL if set.
# Default: undefined
prop.org.opencastproject.admin.help.documentation.url=https://docs.opencast.org

# Link to the Opencast REST service documentation for the local system.
#
# If the property is specified, the admin ui help menu will link to the documentation.
# The value needs to be a URL if set.
# Default: undefined
prop.org.opencastproject.admin.help.restdocs.url=/rest_docs.html

# Link to the media module
#
# If the property is specified, the admin ui will show a media module icon on the top-right that links
# to the media module.
# The value needs to be a URL if set.
# Default: undefined
prop.org.opencastproject.admin.mediamodule.url=${prop.org.opencastproject.engage.ui.url}/engage/ui

# Link to a JIRA feedback widget collector.
#
# If the property is specified, the feedback button in the lower right corner will
# link to the widget and allow to create issues right inside the project. If the
# property is not specified, the feedback button will be hidden.
#
# Value: <a complete url with scheme and port>
#
#prop.org.opencastproject.admin.feedback.url=

# Link to the Engage UI.
#
# Value: <a complete url with scheme and port>
# Default: ${org.opencastproject.server.url}
#
#prop.org.opencastproject.engage.ui.url=http://localhost:8080

# Link to the RSS and atom feed base
#
# Value: <a complete url with scheme and port>
# Default: ${org.opencastproject.server.url}
#
#prop.org.opencastproject.feed.url=http://localhost:8080

# Link to the External API
#
# Value: <a complete url with scheme and port>
# Default: ${org.opencastproject.server.url}
#
#prop.org.opencastproject.external.api.url=http://localhost:8080

# Link to the AssetManager base
#
# Value: <a complete url with scheme and port>
# Default: ${org.opencastproject.server.url}
#
#prop.org.opencastproject.assetmanager.url=http://localhost:8080

# Set a flag to display External Roles on User modal
#
# Value: <boolean>
# Default: false
prop.adminui.user.external_role_display=false

# Name of the list to provide a user listing as used in the group editor of the admin ui.
#
# Values:
# - USERS.INVERSE will list users by name (e.g. "John Sample")
# - USERS.INVERSE.WITH.EMAIL will list users by name and email (e.g. "John Sample <j.sample@opencast.org>")
# - USERS.INVERSE.WITH.USERNAME will list users by name and username (e.g. "John Sample (jsample)")
# Default: USERS.INVERSE.WITH.USERNAME
#prop.adminui.user.listname=USERS.INVERSE.WITH.USERNAME

# Path to the default video player used by the engage interfaces and the LTI tools. Parameters for selecting the
# specific videos will be appended automatically.  Common values include:
#
# - theodul player: /engage/theodul/ui/core.html?id=#{id}
# - paella  player: /paella/ui/watch.html?id=#{id}
#
# Default: /engage/theodul/ui/core.html?id=#{id}
#prop.player=/engage/theodul/ui/core.html?id=#{id}

# Shortcut definitions for admin UI video player
# Format: prop.admin.shortcut.player<action>=<key>
prop.admin.shortcut.player.play_pause=space
prop.admin.shortcut.player.previous_frame=left
prop.admin.shortcut.player.next_frame=right
prop.admin.shortcut.player.previous_segment=up
prop.admin.shortcut.player.next_segment=down
prop.admin.shortcut.player.step_backward=ctrl+left
prop.admin.shortcut.player.step_forward=ctrl+right
prop.admin.shortcut.player.volume_up=plus
prop.admin.shortcut.player.volume_down=-
prop.admin.shortcut.player.mute=m

# Shortcut definitions for admin UI video editor
# Format: prop.admin.shortcut.editor.<action>=<key>
prop.admin.shortcut.editor.split_at_current_time=v
prop.admin.shortcut.editor.cut_selected_segment=backspace
prop.admin.shortcut.editor.play_current_segment=c
prop.admin.shortcut.editor.play_current_segment_with_pre-roll=C
prop.admin.shortcut.editor.play_ending_of_current_segment=n
prop.admin.shortcut.editor.clear_list=ctrl+backspace

# Shortcut definitions for admin UI video editor
# Format: prop.admin.shortcut.general.<action>=<key>
prop.admin.shortcut.general.new_event=n
prop.admin.shortcut.general.new_series=N
prop.admin.shortcut.general.event_view=e
prop.admin.shortcut.general.series_view=s
prop.admin.shortcut.general.remove_filters=r
prop.admin.shortcut.general.select_next_dashboard_filter=f
prop.admin.shortcut.general.select_previous_dashboard_filter=F
prop.admin.shortcut.general.main_menu=m

# Default values for fields in the tab Source of the Add Event wizard
#
# Automatically populates fields in the tab Source of the Add Event wizard.
# The fields populated are 'Start Date', 'Start Time', 'End Time' and 'Duration' which are set as follows:
#
#  Start Date: Current day if the calculated timeslot is earlier than the cutoff time for the day, or the next day,
#              i.e. today if possible, otherwise tomorrow.
#  Start Time: Current time rounded up to the next available timeslot, or the first available timeslot on the next day.
#  Duration:   The default duration of events
#  End Time:   Start Time + Duration (implicit end date may be on next day)

# Start time of first timeslot in the day
# Format: HH:mm
# Default: 08:00
#prop.admin.event.new.start_time=08:00

# Cut-off time for recordings in the day
# Format: HH:mm
# Default: 20:00
#prop.admin.event.new.end_time=20:00

# Duration of event recording in minutes
# Default: 55
#prop.admin.event.new.duration=55

# Interval between recording start times in minutes
# Default: 60
#prop.admin.event.new.interval=60

# Note: prop.admin.event.new.duration need not match prop.admin.event.new.interval;
#       this is to allow short intermissions between consecutive events.

# Preselect an appropriate weekday when scheduling multiple events.
#
# Format: Boolean
# Default: true
#
#prop.admin.event.new.preselect_day=true

#
# Display durations for different notification types in SECONDS.
#
# If you specify the value -1 the notification will remain until manually closed by the user.

# Display duration for notification type error
#
# Format: A integer or -1
# Default: -1
#
#prop.admin.notification.duration.error=-1

# Display duration for notification type success
#
# Format: A integer or -1
# Default: 5
#
#prop.admin.notification.duration.success=5

# Display duration for notification type warning
#
# Format: A integer or -1
# Default: 5
#
#prop.admin.notification.duration.warning=5

# If the preview mode in the video editor is enabled per default.
#
# Format: Boolean
# Default: true
#
#prop.admin.editor.previewmode.default=true

# Event access control update mode when modifying series permissions.
# Possible modes are:
# - always:   When modifying series permissions, automatically remove all permission rules specific to single episodes
#             belonging to the series. This enforces every episode has the rules of the series in effect as soon as they
#             are changed.
# - never:    Only update the series permissions but never replace permissions set on event level. This can mean that
#             updated rules have no effect on already existing events.
# - optional: Like `never` but present users with a button in the series permission dialog which allows them to
#             replace the event specific permissions if they want to.
# Default: optional
#prop.admin.series.acl.event.update.mode=optional
